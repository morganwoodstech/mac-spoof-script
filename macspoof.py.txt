#!/usr/bin/env python

# The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain
# their return codes.
import subprocess

# Allows CLI options and option values from user input to parse and use within code
import optparse


def get_arguments():
    # OptionParser. The constructor for an optparse. OptionParser has a number of keyword arguments that can be used to
    # define the program's options. Stored in the variable "parser"
    parser = optparse.OptionParser()
    # Defines option values
    parser.add_option("-i", "--interface", dest="interface", help="Define network interface. Example: eth0")
    parser.add_option("-m", "--mac", dest="new_mac", help="""Unicast MAC address. Must begin with an even number. 
    Syntax: aa:bb:cc:dd:ee:ff""")
    # When the function is called, the above code is executed, and returns parser.parse_args() value to original
    # location
    return parser.parse_args()


def change_mac(interface, new_mac):
    # Prints conformation regarding user input
    print("[+] Changing MAC address for " + interface + " to " + new_mac)
    # module.function([arg1, arg2]) runs shell commands with previously defined parameters.
    # User input is sanitised by the elements included in list format because
    # user input is treated as an argument for the ifconfig command.
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])


# Captures the information from return parser.parse_args()
(options, arguments) = get_arguments()
# Calls the change_mac function and declares variables defined by arguments parsed above
change_mac(options.interface, options.new_mac)